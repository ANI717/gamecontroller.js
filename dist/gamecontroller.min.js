!function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);const o=(t,e="log")=>{"error"===e?console&&"function"==typeof console.error&&console.error(t):console&&"function"==typeof console.log&&console.log(t)},i=()=>navigator.getGamepads&&"function"==typeof navigator.getGamepads||navigator.getGamepads&&"function"==typeof navigator.webkitGetGamepads;var s={id:"",buttons:0,axes:0,mapping:"",buttonActions:{},axesActions:{},checkStatus:function(){const t=(navigator.getGamepads?navigator.getGamepads():navigator.webkitGetGamepads?navigator.webkitGetGamepads:[])[this.id];if(t.buttons)for(let e=0;e<this.buttons;e++)!0===t.buttons[e].pressed&&this.buttonActions[e].action();if(t.axes)for(let e=0;e<t.axes.length;e++){const n=t.axes[e].toFixed(4),o=Math.floor(e/2);n>=1&&e%2==0?this.axesActions[o].right.action():n<=-1&&e%2==0?this.axesActions[o].left.action():n>=1&&e%2==1?this.axesActions[o].down.action():n<=-1&&e%2==1&&this.axesActions[o].up.action()}},init:function(t){this.id=t.index,this.buttons=t.buttons.length,this.axes=Math.floor(t.axes.length/2),this.mapping=t.mapping;for(let t=0;t<this.buttons;t++)this.buttonActions[t]={action:function(){}};for(let t=0;t<this.axes;t++)this.axesActions[t]={down:{action:function(){}},left:{action:function(){}},right:{action:function(){}},up:{action:function(){}}};return this},on:function(t,e){if(t.match(/^button\d+$/)){const n=parseInt(t.match(/^button(\d+)$/)[1]);n>=0&&n<this.buttons?this.buttonActions[n].action=e:o(`Cannot associate event to button that does not exist (${n}).`,"error")}else if("start"===t)this.buttonActions[9].action=e;else if("select"===t)this.buttonActions[8].action=e;else if("r1"===t)this.buttonActions[5].action=e;else if("r2"===t)this.buttonActions[7].action=e;else if("l1"===t)this.buttonActions[4].action=e;else if("l2"===t)this.buttonActions[6].action=e;else if("power"===t)this.buttons>=17?this.buttonActions[16].action=e:o("No power button available on this gamepad.","error");else if(t.match(/^(up|down|left|right)(\d+)$/)){const n=t.match(/^(up|down|left|right)(\d+)$/),i=n[1],s=parseInt(n[2]);s>=0&&s<this.axes?this.axesActions[s][i].action=e:o(`Cannot associate '${i}' to axe that does not exist (${s}).`,"error")}else if(t.match(/^(up|down|left|right)$/)){const n=t.match(/^(up|down|left|right)$/)[1];this.axesActions[0][n].action=e}return this},off:function(t){if(t.match(/^button\d+$/)){const e=parseInt(t.match(/^button(\d+)$/)[1]);e>=0&&e<this.buttons?this.buttonActions[e].action=function(){}:o(`Cannot deassociate event to button that does not exist (${e})`,"error")}else if("start"===t)this.buttonActions[9].action=function(){};else if("select"===t)this.buttonActions[8].action=function(){};else if("r1"===t)this.buttonActions[5].action=function(){};else if("r2"===t)this.buttonActions[7].action=function(){};else if("l1"===t)this.buttonActions[4].action=function(){};else if("l2"===t)this.buttonActions[6].action=function(){};else if("power"===t)this.buttons>=17?this.buttonActions[16].action=function(){}:o("No power button available on this gamepad.","error");else if(t.match(/^(up|down|left|right)(\d+)$/)){const e=t.match(/^(up|down|left|right)(\d+)$/),n=e[1],i=parseInt(e[2]);i>=0&&i<this.axes?this.axesActions[i][n].action=function(){}:o(`Cannot deassociate '${n}' to axe that does not exist (${i}).`,"error")}else if(t.match(/^(up|down|left|right)$/)){const e=t.match(/^(up|down|left|right)$/)[1];this.axesActions[0][e].action=function(){}}return this}};const a={gamepads:{},isReady:i(),onConnect:function(){},onDisconnect:function(){},onBeforeCycle:function(){},onAfterCycle:function(){},getGamepads:function(){return this.gamepads},getGamepad:function(t){return this.gamepads[t]?this.gamepads[t]:null},checkStatus:function(){const t=window.requestAnimationFrame||window.webkitRequestAnimationFrame,e=Object.keys(a.gamepads);a.onBeforeCycle();for(let t=0;t<e.length;t++)a.gamepads[e[t]].checkStatus();a.onAfterCycle(),e.length>0&&t(a.checkStatus)},init:function(){window.addEventListener("gamepadconnected",t=>{if(o("Gamepad detected."),window.gamepads||(window.gamepads={}),!window.gamepads[t.gamepad.index]){const e=s.init(t.gamepad);window.gamepads[t.gamepad.index]=t.gamepad,this.gamepads[e.id]=e,this.onConnect(this.gamepads[e.id])}1===Object.keys(this.gamepads).length&&this.checkStatus()}),window.addEventListener("gamepaddisconnected",t=>{o("Gamepad disconnected."),delete window.gamepads[t.gamepad.index],delete this.gamepads[t.gamepad.index],this.onDisconnect(t.gamepad.index)})},on:function(t,e){switch(t){case"connect":this.onConnect=e;break;case"disconnect":this.onDisconnect=e;break;case"beforeCycle":case"beforecycle":this.onBeforeCycle=e;break;case"afterCycle":case"aftercycle":this.onAfterCycle=e;break;default:o("Unknown event name","error")}return this},off:function(t){switch(t){case"connect":this.onConnect=function(){};break;case"disconnect":this.onDisconnect=function(){};break;case"beforeCycle":case"beforecycle":this.onBeforeCycle=function(){};break;case"afterCycle":case"aftercycle":this.onAfterCycle=function(){};break;default:o("Unknown event name","error")}return this}};a.init();var c=a;i()?window.gameControl=c:o("Your web browser does not support the Gamepad API.","error")}]);